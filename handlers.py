import db_handler
import markups as m
import sqlalchemy
import re
import datetime

from qr_code_handler import create_qr_code
from db import User


def start(update, context):
    first_name = update.message.from_user.first_name
    user_id = update.message.from_user.id

    User.id = user_id
    User.chat_id = update.effective_chat.id

    hello_message_to_new_user = (
        "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç *Garbage Collector* ‚Äî –°–∫–ª–∞–¥ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è!\n"
        "–í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∞—Ä–µ–Ω–¥–∞ –±–æ–∫—Å–∞? –° —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞—à–∏–º —É—Å–ª—É–≥–∞–º.\n"
        "–ê –ø–æ–∫–∞ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∏ —Ç.–¥. ...\n"
    )
    try:
        db_handler.add_customer(first_name, user_id)
    except sqlalchemy.exc.IntegrityError:
        print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
    photo_path = 'media/storage.jpg'
    with open(photo_path, 'rb') as file:
        update.message.reply_photo(
            photo=file,
            caption=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å *{first_name}*, {hello_message_to_new_user}\n"
                    f"[*–û–°–¢–û–†–û–ñ–ù–û –†–ï–ö–õ–ê–ú–ê*](bit.ly/41Mqpoj)",
            reply_markup=m.start_keyboard(),
            parse_mode='markdown'
        )
    return 0


def user_input(update, context):
    text = update.message.text
    user_id = update.message.from_user.id
    context.user_data['user_id'] = user_id
    if text == "üéø –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
        storage_address = db_handler.get_storage_address()
        # INLINE MENU
        update.message.reply_text(
            '–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–æ—Ä–æ–±–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è. –ï—Å–ª–∏ –≤—ã –∑–Ω–∞–µ—Ç–µ —Ç–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –≤—ã–±–µ—Ä–∏—Ç–µ '
            '–ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç. \n–ï—Å–ª–∏ –∂–µ –≤—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã –≤ –Ω—É–∂–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ, –Ω–∞—à–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã –ø–æ–º–æ–≥—É—Ç –≤–∞–º '
            '–≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ—Ä–æ–±–∫—É –ø—Ä–∏ –≤–∞—à–µ–º –≤–∏–∑–∏—Ç–µ –Ω–∞ —Å–∫–ª–∞–¥.\n–¢–∞–∫–∂–µ –Ω–∞—à –∫—É—Ä—å–µ—Ä –º–æ–∂–µ—Ç –∑–∞–º–µ—Ä–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ '
            '–ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤—ã–±–æ—Ä–æ–º.\n'
            f'–ù–∞—à —Å–∫–ª–∞–¥ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: *{storage_address}*',
            parse_mode='Markdown',
            reply_markup=m.box_size_keyboard()
        )
        return 0  # ORDERS

    elif text == "üìï –ü—Ä–∞–≤–∏–ª–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è":
        storage_rules = '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à —Å–µ—Ä–≤–∏—Å —Å–µ–∑–æ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π *Garbage Collector*. –ù–∞—à–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ' \
                        '–Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Ö—Ä–∞–Ω–µ–Ω–∏–µ *–∂–∏–¥–∫–æ—Å—Ç–∏, –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏, –±–∏—Ç–∫–æ–∏–Ω—ã, –æ—Ä—É–∂–∏–µ –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–µ –≤–µ—â–∏*. ' \
                        '–£ –Ω–∞—Å –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—Ä–∞–Ω–∏–º—ã—Ö –≤–µ—â–µ–π. –•—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ ' \
                        '—Ä–∏—Å–∫. *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–±–∏—Ä–∞–π—Ç–µ —Å–≤–æ–∏ –≤–µ—â–∏ –≤–æ–≤—Ä–µ–º—è*, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–æ–º–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ—Ç–µ—Ä—å. '
        update.message.reply_text(storage_rules, parse_mode='Markdown')

    elif text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
        orders = db_handler.get_customer_orders(user_id)
        if orders:
            update.message.reply_text(
                '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:',
                parse_mode='Markdown',
                reply_markup=m.customer_orders_keyboard(orders)
            )
            return 5  # MY_ORDERS
        else:
            update.message.reply_text(
                text=(
                    '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –∫–∞–∂–µ—Ç—Å—è —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –±–∞—Ä–∞—Ö–ª–∞ –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–∏ üòû\n'
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑.'
                ),
                parse_mode='Markdown',
                # –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥?
            )


# –í–µ—Ç–∫–∞ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑


def box_size_inline_menu(update, context):
    query = update.callback_query
    query.answer()

    if query.data in ['S', 'M', 'L', 'XL']:
        context.user_data['box_size'] = query.data
        text = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–æ–∫—Å *{context.user_data["box_size"]}-—Ä–∞–∑–º–µ—Ä–∞*\n' \
               '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è.\n' \
               '–ú—ã —Ä–∞–¥—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –í–∞–º —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:'
        query.edit_message_text(
            text=text,
            reply_markup=m.storage_periods_keyboard(),
            parse_mode='markdown'
        )
    elif query.data == 'dont_want_measure':
        context.user_data['box_size'] = '–ë—É–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω'
        text = '–•–æ—Ä–æ—à–æ, –º—ã –∑–∞–º–µ—Ä–∏–º —Å–∞–º–∏ –∫–æ–≥–¥–∞ –≤—ã –ø—Ä–∏–µ–¥–µ—Ç–µ –Ω–∞ —Å–∫–ª–∞–¥ –∏–ª–∏ –∑–∞–º–µ—Ä–∏—Ç –Ω–∞—à –∫—É—Ä—å–µ—Ä'
        query.edit_message_text(
            text=text,
            reply_markup=m.storage_periods_keyboard()
        )
        context.user_data['box_size'] = 'Unknown'
    return 0  # ORDERS


def month_spelling(num_month):
    if num_month == 1:
        return '–º–µ—Å—è—Ü'
    elif num_month in [2, 3, 4]:
        return '–º–µ—Å—è—Ü–∞'
    else:
        return '–º–µ—Å—è—Ü–µ–≤'


def storage_period_inline_menu(update, context):
    query = update.callback_query
    query.answer()
    context.user_data['period'] = int(query.data.split('_')[0])
    if query.data in ['1_month', '3_month', '6_month', '12_month']:
        # Orders.period = int(query.data.split('_')[0])
        text = f'–û—Ç–ª–∏—á–Ω–æ, –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ—Å—Ç–∏—Ç—å –∫–æ—Ä–æ–±–∫—É —Ä–∞–∑–º–µ—Ä–æ–º' \
               f'\n*{context.user_data["box_size"]}* –Ω–∞ —Å—Ä–æ–∫' \
               f' *{context.user_data["period"]} {month_spelling(context.user_data["period"])}*.\n' \
               f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:\n' \
               f'–ö—É—Ä—å–µ—Ä—Å–∫–∞—è —Å–ª—É–∂–±–∞ *(–∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ)*\n' \
               f'–ü—Ä–∏–≤–µ–∑–µ—Ç–µ —Å–∞–º–∏ –Ω–∞ –Ω–∞—à —Å–∫–ª–∞–¥ –ø–æ –∞–¥—Ä–µ—Å—É: {db_handler.get_storage_address()}'
        query.edit_message_text(
            text=text,
            reply_markup=m.is_delivery_keyboard(),
            parse_mode='markdown'
        )
    return 1  # DELIVERY


def is_delivery_inline_menu(update, context):
    query = update.callback_query
    query.answer()
    is_delivery = {
        'delivery': 1,
        'self_delivery': 0
    }
    if query.data == 'delivery':
        # Orders.is_delivery = is_delivery_value[query.data]
        text = '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫—É –∫—É—Ä—å–µ—Ä—Å–∫–æ–π —Å–ª—É–∂–±–æ–π:\n' \
               '–ù–∞–º –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n' \
               '–ù–æ –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–º–∏—Ç–µ\n' \
               '*–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö*'
        query.edit_message_text(
            text=text,
            reply_markup=m.personal_data_agreement_keyboard(),
            parse_mode='markdown'
        )
    if query.data == 'self_delivery':
        # Orders.is_delivery = is_delivery_value[query.data]
        text = f'–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –≤—ã –ø—Ä–∏–≤–µ–∑–µ—Ç–µ –≤–µ—â–∏ —Å–∞–º–∏ –ø–æ –∞–¥—Ä–µ—Å—É:\n*{db_handler.get_storage_address()}*\n' \
               '–ù–∞–º –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n' \
               '–ù–æ –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–º–∏—Ç–µ\n' \
               '*–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö*'
        query.edit_message_text(
            text=text,
            reply_markup=m.personal_data_agreement_keyboard(),
            parse_mode='markdown'
        )
    context.user_data['is_delivery'] = is_delivery[query.data]
    return 2  # PERSONAL_DATA


def personal_data_menu(update, context):
    query = update.callback_query
    query.answer()
    if query.data == 'accept':
        query.edit_message_text(
            text=(
                '–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à –∑–∞–∫–∞–∑ –ø–æ—á—Ç–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.\n'
                '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n*'
                '+7-XXX-XXX-XX-XX*\n'
                '\n–ï—Å–ª–∏ –≤—ã –Ω–µ —É–≤–∏–¥–µ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–≤–æ–¥–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, '
                '–∑–Ω–∞—á–∏—Ç —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
            ),
            reply_markup=m.phone_keyboard(),
            parse_mode='markdown',
        )
        return 3  # CUSTOMER_PHONE

    if query.data == 'not_accept':
        query.edit_message_text(
            text='–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, –Ω–æ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ'
        )
        return -1


def write_customer_phone(update, context):
    text = (
        '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.'
        '–ï—Å–ª–∏ –≤—ã –Ω–µ —É–≤–∏–¥–µ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞, '
        '—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.'
        '\n–ü—Ä–∏–º–µ—Ä –∞–¥—Ä–µ—Å–∞: *example@mail.ru*'
    )
    if update.callback_query:
        query = update.callback_query
        query.answer()
        query.edit_message_text(
            text=text,
            reply_markup=m.email_keyboard(),
            parse_mode='markdown',
        )
    else:
        db_handler.add_phone_to_customer(
            context.user_data['user_id'],
            phone=update.message.text
        )
        update.message.reply_text(
            text=text,
            parse_mode='markdown',
        )
    return 4  # CUSTOMER EMAIL


def write_customer_email(update, context):
    db_handler.create_order(
        customer_id=context.user_data['user_id'],
        box_size=context.user_data['box_size'],
        period=context.user_data['period'],
        is_delivery=context.user_data['is_delivery'],
    )
    customer_id = context.user_data['user_id']
    order_data = db_handler.get_last_customer_order(customer_id)

    text = (
        '–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n'
        f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ *‚Ññ{order_data["order_id"]}*\n'
        f'–†–∞–∑–º–µ—Ä –±–æ–∫—Å–∞ - *{order_data["box_size"]}*\n'
        f'–°—Ä–æ–∫ –Ω–∞—á–∞–ª–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è - *{order_data["created_at"].date()}*\n'
        f'–°—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è - *{order_data["expired_at"].date()}*\n'
        f'–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ - *{order_data["price"]}*'
    )
    context.user_data['order_id'] = order_data['order_id']
    if update.callback_query:
        query = update.callback_query
        query.answer()
        query.edit_message_text(
            text=text,
            parse_mode='markdown',
            reply_markup=m.verify_order_keyboard(),
        )
    else:
        db_handler.add_email_to_customer(
            context.user_data['user_id'],
            email=update.message.text
        )
        update.message.reply_text(
            text=text,
            parse_mode='markdown',
            reply_markup=m.verify_order_keyboard(),
        )
    return 7  # VERIFY_ORDER


def verify_order(update, context):
    query = update.callback_query
    query.answer()
    query.edit_message_text(
        text='–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.'
    )
    return -1

# –í–µ—Ç–∫–∞ –ú–æ–∏ –∑–∞–∫–∞–∑—ã


def take_item_back_inline_menu(update, context):
    query = update.callback_query
    query.answer()
    if query.data == 'take_items_all':
        text = '–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–±—Ä–∞—Ç—å –≤—Å–µ –≤–µ—â–∏:\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏'
        query.edit_message_text(
            text=text,
            reply_markup=m.take_items_back_delivery_keyboard()
        )
    elif query.data == 'take_items_partial':
        text = '–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–±—Ä–∞—Ç—å –ª–∏—à—å —á–∞—Å—Ç—å –≤–µ—â–µ–π:\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏'
        query.edit_message_text(
            text=text,
            reply_markup=m.take_items_back_delivery_keyboard()
        )
    elif query.data == 'take_items_back_delivery':
        user_id = context.user_data['user_id']
        customer_phone = db_handler.get_customer_phone(user_id)
        text = '–û—Ç–ª–∏—á–Ω–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∏ —É—Ç–æ—á–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ' \
               f'\n–ü–æ–∂–∞–ª—É–π—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: *{customer_phone}*' \
               f'\n–ï—Å–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π.' \
               f'\n–ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤–µ—Ä–Ω—ã–π, –æ–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞. –°–ø–∞—Å–∏–±–æ'
        query.edit_message_text(
            text=text,
            parse_mode='markdown',
            reply_markup=m.new_phonenumber_keyboard()
        )
    elif query.data == 'take_items_back_myself':
        order_to_take = context.user_data["order_take"]
        text = '–û—Ç–ª–∏—á–Ω–æ –º—ã –∂–¥–µ–º –≤–∞—Å –Ω–∞ –Ω–∞—à–µ–º —Å–∫–ª–∞–¥–µ –ø–æ –∞–¥—Ä–µ—Å—É:' \
               f'\n*{db_handler.get_storage_address()}*\n' \
               f'–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: *–ü–Ω-–í—Å* —Å *09:00-21:00*' \
               f'–≠—Ç–æ—Ç QR-code –æ—Ç–∫—Ä–æ–µ—Ç –≤–∞—à –±–æ–∫—Å'

        qr_code_buffer = create_qr_code(f'–û—Ç–∫—Ä–æ–µ—Ç –±–æ–∫—Å —Å –∑–∞–∫–∞–∑–æ–º ‚Ññ{order_to_take}')
        context.bot.send_photo(chat_id=update.effective_chat.id,
                               photo=qr_code_buffer,
                               caption=text,
                               parse_mode='markdown')
    else:
        order_id = re.search(r'\d+', query.data).group()
        context.user_data['order_take'] = order_id
        text = f'–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ *‚Ññ{order_id}*:\n–í—Å–µ –≤–µ—â–∏ –ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ?'
        query.edit_message_text(
            text=text,
            reply_markup=m.take_items_choice_keyboard(),
            parse_mode='markdown'
        )


def promt_update_customer_phone(update, context):
    text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ *+7-XXX-XXX-XX-XX*\n" \
           "–ï—Å–ª–∏ –≤—ã –Ω–µ —É–≤–∏–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞," \
           " –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"
    context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode='markdown')
    return 6


def write_new_customer_phone(update, context):
    text = update.message.text
    db_handler.add_phone_to_customer(context.user_data['user_id'], phone=text)
    update.message.reply_text('–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –Ω–æ–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω. –ù–∞—à –∫—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏\n'
                              '–•–æ—Ä–æ—à–µ–≥–æ –í–∞–º –¥–Ω—è!')


def cancel(update, context):
    try:
        db_handler.delete_order_by_id(context.user_data['order_id'])
    except Exception:
        print('–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å')
    query = update.callback_query
    query.answer()
    query.edit_message_text(
        '–ù—É –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ.',
        parse_mode='markdown'
    )
    return -1


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ä–æ–∫–µ


def day_spelling(day):
    if day % 10 == 1 and day % 100 != 11:
        return "–¥–µ–Ω—å"
    elif 2 <= day % 10 <= 4 and (day % 100 < 10 or day % 100 >= 20):
        return "–¥–Ω—è"
    else:
        return "–¥–Ω–µ–π"


def notify_about_expiration(context):
    if type(User.id) == int:
        orders = db_handler.get_expiration_date(User.id)
        now = datetime.datetime.now().date()
        for order in orders:
            messages = {
                3: f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order.id} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ *3* –¥–Ω—è",
                7: f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order.id} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ *7* –¥–Ω–µ–π",
                14: f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order.id} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ *14* –¥–Ω–µ–π",
                30: f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order.id} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ *30* –¥–Ω–µ–π"
            }
            time_left = order.expired_at.date() - now
            days_left = time_left
            days_left = days_left.days
            if days_left in messages:
                message = messages[days_left]
                context.bot.send_message(chat_id=User.chat_id, text=message, parse_mode='markdown')


def notify_about_expired(context):
    loyal_period = 180  # How many days we keep the box
    if type(User.id) == int:
        orders = db_handler.get_expiration_date(User.id)
        now = datetime.datetime.now()
        for order in orders:
            time_left = order.expired_at - now
            days_left = time_left.days
            if days_left < 0:
                days_left = time_left.days + loyal_period
                if days_left > 0:
                    message = f"–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ *‚Ññ{order.id}* –∏—Å—Ç–µ–∫." \
                              f"\n–ú—ã –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–∏ –≤–µ—â–∏ –µ—â–µ *{days_left} {day_spelling(days_left)}*," \
                              f" –∑–∞ –æ—á–µ–Ω—å –¥–æ—Ä–æ–≥–æ.\n–ï—Å–ª–∏ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å—Ä–æ–∫–∞" \
                              f" –≤—ã –∏—Ö –Ω–µ –∑–∞–±–µ—Ä–µ—Ç–µ - —Å—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –æ–Ω–∏ –Ω–∞—à–∏."
                    context.bot.send_message(chat_id=User.chat_id, text=message, parse_mode='markdown')

