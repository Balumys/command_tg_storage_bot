import re

from telegram import ReplyKeyboardRemove

import db_handler
import markups as m
import sqlalchemy

from telegram.ext import CommandHandler, MessageHandler, Filters, ConversationHandler, CallbackQueryHandler
from db import Base, Customer, Orders, Storage, Box


def start(update, context):
    hello_message_to_new_user = """
        –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç *Garbage Collector* ‚Äî –°–∫–ª–∞–¥ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è!
        –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∞—Ä–µ–Ω–¥–∞ –±–æ–∫—Å–∞? –° —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞—à–∏–º —É—Å–ª—É–≥–∞–º.
        –ê –ø–æ–∫–∞ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∏ —Ç–¥...,
    """
    first_name = update.message.from_user.first_name
    user_id = update.message.from_user.id
    try:
        db_handler.add_customer(first_name, user_id)
    except sqlalchemy.exc.IntegrityError:
        print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
    photo_path = 'media/storage.jpg'
    with open(photo_path, 'rb') as file:
        update.message.reply_photo(
            photo=file,
            caption=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å *{first_name}*, {hello_message_to_new_user}",
            reply_markup=m.start_keyboard(),
            parse_mode='markdown'
        )


def button(update, context):
    text = update.message.text
    if text == "üéø –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
        storage_address = db_handler.get_storage_addresses()
        # INLINE MENU
        update.message.reply_text(
            '–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–æ—Ä–æ–±–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è. –ï—Å–ª–∏ –≤—ã –∑–Ω–∞–µ—Ç–µ —Ç–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –≤—ã–±–µ—Ä–∏—Ç–µ '
            '–ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç. \n–ï—Å–ª–∏ –∂–µ –≤—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã –≤ –Ω—É–∂–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ, –Ω–∞—à–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã –ø–æ–º–æ–≥—É—Ç –≤–∞–º '
            '–≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ—Ä–æ–±–∫—É –ø—Ä–∏ –≤–∞—à–µ–º –≤–∏–∑–∏—Ç–µ –Ω–∞ —Å–∫–ª–∞–¥.\n–¢–∞–∫–∂–µ –Ω–∞—à –∫—É—Ä—å–µ—Ä –º–æ–∂–µ—Ç –∑–∞–º–µ—Ä–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ '
            '–ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤—ã–±–æ—Ä–æ–º.\n'
            f'–ù–∞—à —Å–∫–ª–∞–¥ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: *{storage_address}*',
            parse_mode='Markdown',
            reply_markup=m.box_size_keyboard()
        )
    elif text == "üìï –ü—Ä–∞–≤–∏–ª–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è":
        storage_rules = '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à —Å–µ—Ä–≤–∏—Å —Å–µ–∑–æ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π *Garbage Collector*. –ù–∞—à–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ' \
                        '–Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Ö—Ä–∞–Ω–µ–Ω–∏–µ *–∂–∏–¥–∫–æ—Å—Ç–∏, –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏, –±–∏—Ç–∫–æ–∏–Ω—ã, –æ—Ä—É–∂–∏–µ –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–µ –≤–µ—â–∏*. ' \
                        '–£ –Ω–∞—Å –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—Ä–∞–Ω–∏–º—ã—Ö –≤–µ—â–µ–π. –•—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ ' \
                        '—Ä–∏—Å–∫. *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–±–∏—Ä–∞–π—Ç–µ —Å–≤–æ–∏ –≤–µ—â–∏ –≤–æ–≤—Ä–µ–º—è*, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–æ–º–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ—Ç–µ—Ä—å. '
        update.message.reply_text(storage_rules, parse_mode='Markdown')
    elif text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
        user_id = update.message.from_user.id
        customer_id = db_handler.get_customer_id(user_id)
        if customer_id:
            # INLINE MENU
            my_boxes = db_handler.get_customer_orders(customer_id)
            update.message.reply_text(my_boxes, parse_mode='Markdown', reply_markup=m.take_items_choice_keyboard())
        else:
            update.message.reply_text(
                '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –∫–∞–∂–µ—Ç—Å—è —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –±–∞—Ä–æ—Ö–ª–∞ –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–∏ üòû\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑.',
                parse_mode='Markdown',
            )
    elif context.user_data.get('state') == 'PHONE':
        print('TYT')


def callback_handler(update, context):
    query = update.callback_query
    query.answer()
    # TAKE ITEMS BACK
    if query.data in ['take_items_all', 'take_items_partial']:
        take_item_back_inline_menu(update, context)
    # PLACE ORDER
    if query.data in ['S', 'M', 'L', 'XL', 'dont_want_measure']:
        box_size_inline_menu(update, context)
    if query.data in ['1_month', '3_month', '6_month', '12_month']:
        storage_period_inline_menu(update, context)
    if query.data in ['delivery', 'self_delivery']:
        is_delivery_inline_menu(update, context)
    if query.data == 'accept':
        pass
    if query.data == 'not_accept':
        text = '–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å'
        query.edit_message_text(
            text=text
        )


def take_item_back_inline_menu(update, context):
    query = update.callback_query
    query.answer()
    if query.data == 'take_items_all':
        text = '–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–±—Ä–∞—Ç—å –≤—Å–µ –≤–µ—â–∏:\n–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏'
        query.edit_message_text(
            text=text,
            reply_markup=m.take_items_back_delivery_keyboard()
        )
    if query.data == 'take_items_partial':
        text = '–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–±—Ä–∞—Ç—å –ª–∏—à—å —á–∞—Å—Ç—å –≤–µ—â–µ–π:\n–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏'
        query.edit_message_text(
            text=text,
            reply_markup=m.take_items_back_delivery_keyboard()
        )


def box_size_inline_menu(update, context):
    query = update.callback_query
    query.answer()
    if query.data in ['S', 'M', 'L', 'XL']:
        Box.size = query.data
        text = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–æ–∫—Å *{query.data}-—Ä–∞–∑–º–µ—Ä–∞*\n' \
               f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è.\n–ú—ã —Ä–∞–¥—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –í–∞–º —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:'
        query.edit_message_text(
            text=text,
            reply_markup=m.storage_periods_keyboard(),
            parse_mode='markdown'
        )
    elif query.data == 'dont_want_measure':
        Box.size = '–ë—É–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω'
        text = '–•–æ—Ä–æ—à–æ, –º—ã –∑–∞–º–µ—Ä–∏–º —Å–∞–º–∏ –∫–æ–≥–¥–∞ –≤—ã –ø—Ä–∏–µ–¥–µ—Ç–µ –Ω–∞ —Å–∫–ª–∞–¥ –∏–ª–∏ –∑–∞–º–µ—Ä–∏—Ç –Ω–∞—à –∫—É—Ä—å–µ—Ä'
        query.edit_message_text(
            text=text,
            reply_markup=m.storage_periods_keyboard()
        )


def month_spelling(num_month):
    if num_month == 1:
        return '–º–µ—Å—è—Ü'
    elif num_month in [2, 3, 4]:
        return '–º–µ—Å—è—Ü–∞'
    else:
        return '–º–µ—Å—è—Ü–µ–≤'


def storage_period_inline_menu(update, context):
    query = update.callback_query
    query.answer()
    if query.data in ['1_month', '3_month', '6_month', '12_month']:
        Orders.period = int(query.data.split('_')[0])
        text = f'–û—Ç–ª–∏—á–Ω–æ, –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ—Å—Ç–∏—Ç—å –∫–æ—Ä–æ–±–∫—É —Ä–∞–∑–º–µ—Ä–æ–º' \
               f'\n*{Box.size}* –Ω–∞ —Å—Ä–æ–∫ *{Orders.period} {month_spelling(Orders.period)}*.\n' \
               f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–∏—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:\n' \
               f'–ö—É—Ä—å–µ—Ä—Å–∫–∞—è —Å–ª—É–∂–±–∞ *(–∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ)*\n' \
               f'–ü—Ä–∏–≤–µ–∑–µ—Ç–µ —Å–∞–º–∏ –Ω–∞ –Ω–∞—à —Å–∫–ª–∞–¥ –ø–æ –∞–¥—Ä–µ—Å—É: {db_handler.get_storage_addresses()}'
        query.edit_message_text(
            text=text,
            reply_markup=m.is_delivery_keyboard(),
            parse_mode='markdown'
        )


def is_delivery_inline_menu(update, context):
    query = update.callback_query
    query.answer()
    is_delivery_value = {
        'delivery': 1,
        'self_delivery': 0
    }
    if query.data == 'delivery':
        Orders.is_delivery = is_delivery_value[query.data]
        text = f'–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫—É –∫—É—Ä—å–µ—Ä—Å–∫–æ–π —Å–ª—É–∂–±–æ–π:\n' \
               f'–ù–∞–º –ø–æ–¥—Ç—Ä–µ–±—É—é—Ç—Å—è –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n' \
               f'–ù–æ –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–º–∏—Ç–µ\n*–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö*'
        query.edit_message_text(
            text=text,
            reply_markup=m.personal_data_agreement_keyboard(),
            parse_mode='markdown'
        )
    else:
        Orders.is_delivery = is_delivery_value[query.data]
        text = f'–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –≤—ã –ø—Ä–∏–≤–µ–∑–µ—Ç–µ –≤–µ—â–∏ —Å–∞–º–∏ –ø–æ –∞–¥—Ä–µ—Å—É {db_handler.get_storage_addresses()}\n' \
               f'–ù–∞–º –ø–æ–¥—Ç—Ä–µ–±—É—é—Ç—Å—è –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n' \
               f'–ù–æ –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–º–∏—Ç–µ\n*–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö*'
        query.edit_message_text(
            text=text,
            reply_markup=m.personal_data_agreement_keyboard(),
            parse_mode='markdown'
        )


def personal_data_agreement_inline_menu(update, context):
    query = update.callback_query
    query.answer()
    if query.data in ['1_month', '3_month', '6_month', '12_month']:
        Orders.period = int(query.data.split('_')[0])
        text = f'–û—Ç–ª–∏—á–Ω–æ, –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ—Å—Ç–∏—Ç—å –∫–æ—Ä–æ–±–∫—É —Ä–∞–∑–º–µ—Ä–æ–º' \
               f'\n*{Box.size}* –Ω–∞ —Å—Ä–æ–∫ *{Orders.period} {month_spelling(Orders.period)}*.\n' \
               f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–∏—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:\n' \
               f'–ö—É—Ä—å–µ—Ä—Å–∫–∞—è —Å–ª—É–∂–±–∞ *(–∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ)*\n' \
               f'–ü—Ä–∏–≤–µ–∑–µ—Ç–µ —Å–∞–º–∏ –Ω–∞ –Ω–∞—à —Å–∫–ª–∞–¥ –ø–æ –∞–¥—Ä–µ—Å—É: *{db_handler.get_storage_addresses()}*'
        query.edit_message_text(
            text=text,
            reply_markup=m.is_delivery_keyboard(),
            parse_mode='markdown'
        )


start_handler = CommandHandler('start', start)
button_handler = MessageHandler(Filters.text, button)
